{"version":3,"sources":["../src/Source.js"],"names":[],"mappings":"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","file":"Source.js","sourcesContent":["import { SourceMapGenerator } from 'source-map';\nimport Preprocessor from './Preprocessor';\n\nconst isSpaceRegexp = /\\s/;\n\nexport default class Source {\n    _filename: string;\n    _sourcemap;\n    _state;\n    _lastOriginalPosition = { line: 1, col: 0 };\n    _lastOutputPosition = { line: 1, col: 0 };\n\n    _output: Stream;\n    _buffer: string;\n    _currentInstruction: string;\n\n    /**\n     * @param {Preprocessor} preprocessor\n     * @param {string} filename\n     * @param {string|Stream} [output]\n     */\n    constructor(preprocessor: Preprocessor, filename: string, output: Stream) {\n        this._filename = filename;\n        this._state = 'none';\n        this._preprocessor = preprocessor;\n        this._sourcemap = new SourceMapGenerator({\n            // file: destfile,\n        });\n        this._output = output || process.stdout;\n        this._buffer = '';\n        this.expectingEOF = 0;\n        this._throwAway = false;\n    }\n\n    getSourceMap() {\n        return this._sourcemap;\n    }\n\n    async processLetter(letter) {\n        // console.log('process letter ', letter, this._state);\n        switch (this._state) {\n            case 'none':\n            case 'after-processor':\n                if (letter === '/') {\n                    this.writeBufferToOutput();\n                    this._state = 'first-slash';\n                    this._buffer += letter;\n                    break;\n                }\n\n                if (this._state === 'after-processor') {\n                    const result = await this._lastProcessor.processLetter({\n                        letter,\n                        source: this,\n                        buffer: this._buffer,\n                    });\n\n                    if (result) {\n                        if (result.ignoreLetter && result.ignoreBuffer) {\n                            result.replaceBy = '';\n                        }\n\n                        if (result.bufferLetter) {\n                            this._buffer += letter;\n                            break;\n                        } else if (result.replaceBy) {\n                            this.writeToOutput(result.replaceBy, true);\n                            this.ignoreBuffer();\n                            break;\n                        } else if (result.ignoreBuffer) {\n                            this.ignoreBuffer();\n                            this._state = 'none';\n                            // keep going to write current letter\n                        }\n                    } else {\n                        this._buffer += letter;\n                        this.writeBufferToOutput();\n                        this._state = 'none';\n                    }\n                }\n\n                if (this.keepBuffering) {\n                    this._buffer += letter;\n                } else {\n                    this.writeToOutput(letter);\n                    this.advancePosition(this._lastOriginalPosition, letter);\n                }\n\n                break;\n\n            case 'first-slash':\n                if (letter === '/') {\n                    this._state = 'oneline-comment';\n                    this._buffer += letter;\n                } else if (letter === '*') {\n                    this._state = 'multiline-comment';\n                    this._buffer += letter;\n                } else {\n                    this._state = 'none';\n                    this.writeToOutput('/' + letter);\n                    this._buffer = '';\n                }\n\n                break;\n\n            case 'online-comment':\n            case 'multiline-comment':\n                this._buffer += letter;\n                if (isSpaceRegexp.test(letter)) {\n                    this._buffer += letter;\n                } else if (letter === '#') {\n                    this._currentInstruction = '';\n                    this._state += '-instruction';\n                } else {\n                    this._output.write(this._buffer);\n                    this._buffer = '';\n                    this._state = 'none';\n                }\n\n                break;\n\n            case 'online-comment-instruction':\n            case 'multiline-comment-instruction':\n                this._buffer += letter;\n                if (this._state === 'online-comment-instruction' && letter === '\\n') {\n                    await this.callProcessor();\n                    break;\n                }\n\n                if (isSpaceRegexp.test(letter)) {\n                    this._currentInstructionContent = '';\n                    this._state += '-content-start';\n                    break;\n                }\n\n                if (this._state.startsWith('multiline') && letter === '*') {\n                    this._state = 'multiline-comment-instruction-star';\n                    this._previousState = 'multiline-comment-instruction';\n                    break;\n                }\n\n                this._currentInstruction += letter;\n\n                break;\n\n            case 'online-comment-instruction-content-start':\n            case 'multiline-comment-instruction-content-start':\n                this._buffer += letter;\n                if (!isSpaceRegexp.test(letter)) {\n                    if (this._state.startsWith('multiline') && letter === '*') {\n                        this._state = 'multiline-comment-instruction-star';\n                        this._previousState = 'multiline-comment-instruction-content-start';\n                    } else {\n                        this._currentInstructionContent = letter;\n                        this._state = this._state.slice(0, -6);\n                    }\n                }\n\n                break;\n\n            case 'online-comment-instruction-content':\n            case 'multiline-comment-instruction-content':\n                this._buffer += letter;\n                if (this._state.startsWith('multiline') && letter === '*') {\n                    this._state = 'multiline-comment-instruction-star';\n                    this._previousState = 'multiline-comment-instruction-content';\n                    break;\n                } else if (this._state === 'online-comment-instruction-content' && letter === '\\n') {\n                    await this.callProcessor();\n                    break;\n                }\n\n                this._currentInstructionContent += letter;\n\n                break;\n\n            case 'multiline-comment-instruction-star':\n                this._buffer += letter;\n\n                if (letter === '*') {\n                    this._currentInstructionContent += '*';\n                    break;\n                }\n\n                if (letter !== '/') {\n                    this._currentInstructionContent += '*' + letter;\n                    this._state = this._previousState;\n                    break;\n                }\n\n                await this.callProcessor();\n\n                break;\n        }\n    }\n\n    async end() {\n        // console.log('end', this._state);\n\n        if (this.expectingEOF !== 0) {\n            throw new Error('Unexpected EOF');\n        }\n\n        if (this._state === 'none') {\n            if (this._buffer) {\n                // still waiting for the end of an instruction\n                throw new Error('Unexpected EOF');\n            }\n\n            return;\n        }\n\n        if (this._state.startsWith('online-comment-instruction')) {\n            this.callProcessor();\n            return;\n        }\n\n        if (this._state.startsWith('multiline-comment')) {\n            throw new Error('Unexpected EOF: expecting end of multiline comment');\n        }\n\n        throw new Error('Unexpected EOF');\n    }\n\n    async callProcessor() {\n        const processor = this._preprocessor._processors.get(this._currentInstruction);\n        this._lastProcessor = processor;\n\n        if (!processor) {\n            throw new Error('Missing processor for instruction ' + this._currentInstruction);\n        }\n\n        const result = await processor.process({\n            instruction: this._currentInstruction,\n            source: this,\n            preprocessor: this._preprocessor,\n            content: this._currentInstructionContent.trimRight(),\n        });\n\n        if (result && result.replaceBy !== undefined) {\n            this.writeToOutput(result.replaceBy, true);\n            this.ignoreBuffer();\n        } else if (!result || !result.keepBuffering) {\n            this.writeBufferToOutput();\n        }\n\n        this.keepBuffering = result && result.keepBuffering;\n\n        if (result && result.throwAway !== undefined) {\n            this._throwAway = result.throwAway;\n        }\n\n        if (result && result.keepCallMe) {\n            this._state = 'after-processor';\n        } else {\n            this._state = 'none';\n        }\n    }\n\n    advancePosition(position, letter) {\n        if (letter === '\\n') {\n            position.line = this._lastOutputPosition.line + 1;\n            position.col = 0;\n            return false;\n        } else {\n            position.col++;\n            return true;\n        }\n    }\n\n    writeBufferToOutput() {\n        for (let letter of this._buffer) {\n            this.writeToOutput(letter);\n            this.advancePosition(this._lastOriginalPosition, letter);\n        }\n\n        this._buffer = '';\n    }\n\n    writeToOutput(string: string, force: boolean) {\n        if (this._throwAway && !force) {\n            return;\n        }\n\n        this._output.write(string);\n        for (let letter of string) {\n            if (letter !== '\\n') {\n                this._sourcemap.addMapping({\n                    generated: {\n                        line: this._lastOriginalPosition.line,\n                        column: this._lastOriginalPosition.col,\n                    },\n\n                    source: this._filename,\n                    original: {\n                        line: this._lastOutputPosition.line,\n                        column: this._lastOutputPosition.col,\n                    },\n\n                    name: letter,\n                });\n            }\n\n            this.advancePosition(this._lastOutputPosition, letter);\n        }\n    }\n\n    ignoreBuffer() {\n        for (let letter in this._buffer) {\n            this.advancePosition(this._lastOriginalPosition, letter);\n        }\n\n        this._buffer = '';\n    }\n}\n"]}