{"version":3,"sources":["../src/Preprocessor.js"],"names":[],"mappings":"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","file":"Preprocessor.js","sourcesContent":["import { createReadStream } from 'fs';\nimport processors from './processors';\n// import Processor from './Processor';\nimport Source from './Source';\nimport { streamToLetterStream } from './utils';\n\nexport default class Preprocessor {\n    _processors: Map<string, Processor> = new Map();\n    _sourcemap: any;\n    _options: Object;\n\n    constructor(options: Object) {\n        this._options = options;\n        // include(?:Once)?|ifn?def|ifelse|if|\\/if|endif|else|el(?:se)?if|eval|value|val|setbasedir\n    }\n\n    hasDefined(key): boolean {\n        return key in this._options.defines;\n    }\n\n    getDefined(key) {\n        if (!this.hasDefined(key)) {\n            throw new Error('Missing defined value: \"' + key + '\"');\n        }\n\n        return this._options.defines[key];\n    }\n\n    addDefaultProcessors() {\n        processors.forEach(def => {\n            const processor = new def.Class(this);\n\n            def.instructions.forEach(instruction => {\n                this.addProcessor(instruction, processor);\n            });\n        });\n    }\n\n    addProcessor(instruction: string, processor: Processor) {\n        this._processors.set(instruction, processor);\n    }\n\n    processFile(filepath: string, filename: string, output): Promise<Source> {\n        const fileStream = createReadStream(filepath);\n        return this.processStream(filename || filepath, fileStream, output);\n    }\n\n    processStream(filename, stream, output) {\n        return new Promise((resolve, reject) => {\n            const source = new Source(this, filename, output);\n            const stream = streamToLetterStream(stream);\n\n            stream.on('data', (letter) => {\n                stream.pause();\n                source.processLetter(letter).then(() => {\n                    stream.resume();\n                }).catch(reject);\n            });\n\n            stream.on('end', () => {\n                source.end().then(() => resolve(source)).catch(reject);\n            });\n        });\n    }\n\n    async process(filename: string, content, output): Source {\n        if (content instanceof Buffer) {\n            content = content.toString();\n        }\n\n        const source = new Source(this, filename, output);\n\n        for (let letter of content) {\n            await source.processLetter(letter);\n        }\n\n        await source.end();\n        return source;\n    }\n}\n"]}