{"version":3,"sources":["../../src/processors/ValueProcessor.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;kCAA8B,qBAAqB;;;;AAEnD,MAAM,UAAU,GAAG,CACf,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACN,CAAC;;;IAEmB,cAAc;cAAd,cAAc;;aAAd,cAAc;8BAAd,cAAc;;mCAAd,cAAc;;;iBAAd,cAAc;;;;;4CAClB,WAAC,IAAwB,EAAE;gBAAxB,WAAW,GAAb,IAAwB,CAAtB,WAAW;gBAAE,OAAO,GAAtB,IAAwB,CAAT,OAAO;;AAChC,gBAAI,WAAW,KAAK,MAAM,EAAE;AACxB,uBAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;aAC3B,MAAM;AACH,uBAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aACtC;;AAED,mBAAO;AACH,0BAAU,EAAE,IAAI;AAChB,yBAAS,EAAE,MAAM,CAAC,OAAO,CAAC;aAC7B,CAAC;SACL;;;;;;4CAEkB,WAAC,KAAkB,EAAE;gBAAlB,MAAM,GAAR,KAAkB,CAAhB,MAAM;gBAAE,MAAM,GAAhB,KAAkB,CAAR,MAAM;;AAChC,gBAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AACrB,oBAAI,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;AACrD,2BAAO;AACH,oCAAY,EAAE,IAAI;AAClB,oCAAY,EAAE,MAAM,KAAK,GAAG;qBAC/B,CAAC;iBACL;;AAED,oBAAI,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,GAAG,EAAE;AAClC,2BAAO;AACH,oCAAY,EAAE,IAAI;AAClB,oCAAY,EAAE,IAAI;qBACrB,CAAC;iBACL;;AAED,oBAAI,CAAC,MAAM,KAAK,MAAM,IAAI,MAAM,KAAK,KAAK,CAAA,IAAK,MAAM,KAAK,GAAG,EAAE;AAC3D,2BAAO;AACH,oCAAY,EAAE,IAAI;AAClB,oCAAY,EAAE,IAAI;qBACrB,CAAC;iBACL;;AAED,oBAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;AACnB,2BAAO,KAAK,CAAC;iBAChB;aACJ;;AAED,gBAAI,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,GAAG,EAAE;AACtE,uBAAO;AACH,gCAAY,EAAE,IAAI;iBACrB,CAAC;aACL;SACJ;;;WA/CgB,cAAc;;;kBAAd,cAAc","file":"ValueProcessor.js","sourcesContent":["import AbstractProcessor from './AbstractProcessor';\n\nconst nextLetter = [\n    ';',\n    ',',\n    ')',\n    '.',\n    '+',\n    '-',\n    '*',\n    '/',\n    ' ',\n];\n\nexport default class ValueProcessor extends AbstractProcessor {\n    async process({ instruction, content }) {\n        if (instruction === 'eval') {\n            content = eval(content);\n        } else {\n            content = this.getDefined(content);\n        }\n\n        return {\n            keepCallMe: true,\n            replaceBy: String(content),\n        };\n    }\n\n    async processLetter({ buffer, letter }) {\n        if (buffer.length !== 0) {\n            if (buffer === '0' && nextLetter.indexOf(letter) !== -1) {\n                return {\n                    ignoreBuffer: true,\n                    ignoreLetter: letter === ' ',\n                };\n            }\n\n            if (buffer === \"'\" && letter === \"'\") {\n                return {\n                    ignoreBuffer: true,\n                    ignoreLetter: true,\n                };\n            }\n\n            if ((buffer === 'fals' || buffer === 'tru') && letter === 'e') {\n                return {\n                    ignoreBuffer: true,\n                    ignoreLetter: true,\n                };\n            }\n\n            if (buffer.length > 5) {\n                return false;\n            }\n        }\n\n        if (letter === '0' || letter === \"'\" || letter === 'f' || letter === 't') {\n            return {\n                bufferLetter: true,\n            };\n        }\n    }\n}\n"]}