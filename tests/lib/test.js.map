{"version":3,"sources":["../src/test.js"],"names":[],"mappings":"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","file":"test.js","sourcesContent":["/* global test, suite */\n\nimport assert from 'proclaim';\nimport Preprocessor from '../../lib/Preprocessor';\n\nsuite('', () => {\n    const p = new Preprocessor({\n        defines: {\n            value: 50,\n            valueString: 'test',\n            trueVar: true,\n            falseVar: false,\n        },\n    });\n\n    p.addDefaultProcessors();\n\n    test('test val', async function() {\n        const content = { string: '', write(string) { this.string += string; } };\n\n        const result = await p.process('test.js', 'test(/* #val value */0);', content);\n        assert.strictEqual(content.string, 'test(50);');\n        assert.strictEqual(result.getSourceMap().toString(), `{\"version\":3,\"sources\":[\"test.js\"],`\n            + `\"names\":[\"t\",\"e\",\"s\",\"(\",\"5\",\"0\",\")\",\";\"],`\n            + `\"mappings\":\"AAAAA,CAACC,CAACC,CAACF,CAACG,CAACC,AAACC,kBAACC,CAACC\"}`);\n    });\n\n    test('test eval', async function() {\n        const content = { string: '', write(string) { this.string += string; } };\n\n        const result = await p.process('test.js', 'test(/* #eval 3*4 */0);', content);\n        assert.strictEqual(content.string, 'test(12);');\n    });\n\n    test('test ifdef and ifnotdef', async function() {\n        const content = { string: '', write(string) { this.string += string; } };\n\n        const result = await p.process('test.js', 'test(/* #ifdef value */1/* #ifnotdef value */2/* #/if *//* #/if */'\n                + '/* #ifdef value */3/* #/if *//* #ifnotdef value */4/* #/if */);', content);\n        assert.strictEqual(content.string, 'test(13);');\n    });\n\n    test('test if and ifnot', async function() {\n        const content = { string: '', write(string) { this.string += string; } };\n\n        const result = await p.process('test.js', 'test(/* #if trueVar */1/* #ifnot trueVar */2/* #/if *//* #/if */'\n                + '/* #if trueVar */3/* #/if *//* #ifnot trueVar */4/* #/if */);', content);\n        assert.strictEqual(content.string, 'test(13);');\n    });\n\n    test('test else', async function() {\n        const content = { string: '', write(string) { this.string += string; } };\n\n        const result = await p.process('test.js', 'test(/* #if trueVar */1/* #else */2/* #/if */'\n                + '/* #ifnot trueVar */3/* #else */4/* #/if */);', content);\n        assert.strictEqual(content.string, 'test(14);');\n    });\n\n    test('test elseif', async function() {\n        const content = { string: '', write(string) { this.string += string; } };\n\n        const result = await p.process('test.js', 'test(/* #if falseVar */1/* #elseif trueVar */2/* #/if */'\n              + '/* #if trueVar */3/* #elseif trueVar */4/* #/if */'\n              + '/* #if falseVar */5/* #elseif falseVar */6/* #elseif trueVar */7/* #/if */);', content);\n        assert.strictEqual(content.string, 'test(237);');\n    });\n});\n"]}